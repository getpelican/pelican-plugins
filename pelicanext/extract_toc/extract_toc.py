"""
Extract Table of Content
========================

A Pelican plugin to extract table of contents (TOC) from `article.content`.

Copyright (c) Talha Mansoor

Author          | Talha Mansoor
----------------|-----
Author Email    | talha131@gmail.com 
Author Homepage | http://onCrashReboot.com 
Github Account  | https://github.com/talha131 

Why do you need it?
===================

Pelican can generate TOC of reST and Markdown files, using markup's respective
directive and extension. TOC is generated and placed at the beginning of
`article.content`. You cannot place the TOC in `<nav>` HTML5 tag, nor can you
place the TOC at the end of your article's content.

This plugin extracts TOC from `article.content` and places it in `article.toc`.

Requirements
============

`extract_toc` requires BeautifulSoup.

```bash
pip install beautifulsoup4
```

How to Use
==========

**Important!** This plugin only works with reST and Markdown files. reST files
should have `.rst` extension. Markdown files can have `.md`, `.mkd` or
`markdown`.

If TOC appears in your article at more than one places, `extract_toc` will
remove only the first occurrence. You shouldn't probably need to have multiple
TOC in your article. In case you need to display it multiple times, you can
print it via your template.

TOC generated by Markdown is enclosed in `<div class="toc">`. On the other hand
TOC generated by reST is enclosed in `<div class="contents topic">`.
`extract_toc` relies on this behavior to work.

Template Example
================

```python
{% if article.toc %}
    <nav class="affix">
    {{ article.toc }}
    </nav>
{% endif %}
```
"""

from pelican import signals
import os.path
from bs4 import BeautifulSoup


def is_markdown(extension):
    if extension in ['md', 'markdown', 'mkd']:
        return True
    else:
        return False


def is_rest(extension):
    if extension in ['rst']:
        return True
    else:
        return False


def extract_toc(content):
    soup = BeautifulSoup(content._content)
    filename = unicode(content)
    extension = os.path.splitext(filename)[1][1:]
    toc = ''
    if is_markdown(extension):
        toc = soup.find('div', class_='toc')
    elif is_rest(extension):
        toc = soup.find('div', class_='contents topic')
    if toc:
        toc.extract()
        content._content = unicode(soup)
        content.toc = unicode(toc)


def register():
    signals.content_object_init.connect(extract_toc)
